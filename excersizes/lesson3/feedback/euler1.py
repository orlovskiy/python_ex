#!/usr/bin/python3
# coding: utf-8
# Числа
__author__ = 'Daniil Orlovskiy'
# Заполните код преведенных ниже функций. Функция main() уже настроена
# для вызова функций с несколькими различными параметрами,
# и выводит 'OK' в случае, если вызов функции корректен.
# Начальный код каждой функции содержит 'return'
# и является просто заготовкой для вашего кода.


# A. Сумма чисел кратных 3 и 5
# Если выписать все натуральные числа меньше 10, кратные 3 или 5, 
# то получим 3, 5, 6 и 9. Сумма этих чисел - 23.
# Найдите сумму всех чисел меньше 1000 кратных 3 или 5.
# Примечание: попробуйте записать решение в одну строку при помощи генератора списка
# и встроенной фукнции sum
def multiples():        # 2016.03.24_01:02:02 checked. prusanov
    return sum([x for x in xrange(1000) if x % 3 == 0 or x % 5 == 0])       # квадратные скобки можно не указывать


# B. Сумма четных чисел ряда Фибоначчи
# Каждый следующий элемент ряда Фибоначчи получается при сложении 
# двух предыдущих. Начиная с 1 и 2, первые 10 элементов будут:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# Найдите сумму всех элементов ряда Фибоначчи, каждый их которых
# является четным числом и не превышает четырех миллионов.
# Подсказка: разбейте задачу на части: сначала получите сам ряд Фибоначчи,
# зачем получите ряд четных элементов.
def fibonacci():        # 2016.03.24_01:05:20 checked. prusanov
    first = 0
    second = 1
    fibonacci_even_list = []
    x = 0
    while x <= 4000000:     # попробуйте сделать ряд Фибоначчи фукнцией-генератором
        x = first + second
        first = second
        second = x
        if x % 2 == 0:
            fibonacci_even_list.append(x)

        
    return sum(fibonacci_even_list)


# С. Самый большой палиндром
# Число-палиндром с обеих сторон (справа и слева) читается одинаково. 
# Самое большое число-палиндром, полученное произведением двух двухзначных чисел – 9009 = 91 * 99.
# Найдите самый большой палиндром, полученный произведением двух трёхзначных чисел.
def palindrome():       # 2016.03.24_01:05:29 checked. prusanov
    the_biggest_palyndrome = 0
    palyndromes = []
    x = [x for x in range(1000)][:900:-1]
    y = [y for y in range(1000)][:900:-1]

    for a in x:
        for b in y:         # этот цикл можно бы чуток сократить. Подумайте.
            test_value = a * b
            if "".join(str(test_value)[::-1][0:len(str(test_value))/2]) == "".join(str(test_value)[:len(str(test_value))/2:1]):
                    # ой-ой... это ж палиндром ;)  if str(test_value) == str(test_value)[::-1]
                palyndromes.append(test_value)
    palyndromes = sorted(palyndromes)           # можно воспользоваться функцией max()
    the_biggest_palyndrome = palyndromes[-1]
            
             
    return the_biggest_palyndrome

# Простая функция test() используется в main() для вывода
# сравнения того, что возвращает с функция с тем, что она должна возвращать.
def test(got, expected):
    if got == expected:
        prefix = ' OK '
    else:
        prefix = '  X '
    print('%s Получено: %s | Ожидалось: %s' % (prefix, repr(got), repr(expected)))


# Вызывает фунции выше с тестовыми параметрами.
def main():
    print('Сумма чисел кратных 3 и 5')
    test(multiples(), 233168)

    print()
    print('Сумма четных чисел ряда Фибоначчи')
    test(fibonacci(), 4613732)

    print()
    print('Самый большой палиндром')
    test(palindrome(), 906609)

if __name__ == '__main__':
    main()






